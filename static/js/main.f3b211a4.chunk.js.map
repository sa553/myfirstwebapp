{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","concat","type","role","word","txt","toLowerCase","charAt","toUpperCase","slice","capatalize","message","TextForm","proos","Fragment","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","tooglemode","htmlFor","placeholder","Navbar","text","setText","useState","style","backgroundColor","color","value","onChange","event","target","rows","clickUpper","newText","showAlert","clickLower","clickClear","clickCopy","document","getElementById","select","navigator","clipboard","writeText","split","length","prototype","PropTypes","string","isRequired","defaultProps","App","setMode","setAlert","setTimeout","toogleMode","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.f3b211a4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capatalize = (word) =>{\r\n        const txt= word.toLowerCase();\r\n        return txt.charAt(0).toUpperCase() + txt.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capatalize(props.alert.type)}</strong>: {props.alert.message}\r\n  </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Navbar from './Navbar'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function TextForm(proos) {\r\n  return (\r\n    <>\r\n        <nav className={`navbar navbar-expand-lg navbar-${proos.mode} bg-${proos.mode}`}>\r\n        <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{proos.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">ABOUT</Link>\r\n            </li> */}\r\n            </ul>\r\n            <div className={`form-check form-switch mx-1 text-${proos.mode === 'light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={proos.tooglemode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n            <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-success\" type=\"submit\">Search</button>\r\n            </form>\r\n        </div>\r\n        </div>\r\n    </nav>\r\n  </>\r\n  )\r\n}\r\n\r\nNavbar.prototype = {title: PropTypes.string.isRequired};\r\nNavbar.defaultProps= {title: 'Set Title Here'};","import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TextForm from './TextForm'\r\n\r\nexport default function Navbar(proos) {\r\n    const [text, setText]= useState('');\r\n    const clickUpper = () =>\r\n    {\r\n        let newText= text.toUpperCase();\r\n        setText(newText);\r\n        proos.showAlert(\"Converted to UpperCase\",'success');\r\n    }\r\n    const clickClear = () =>\r\n    {\r\n        let newText='';\r\n        setText(newText);\r\n        proos.showAlert(\"Text has been cleared\",'success');\r\n    }\r\n    const clickCopy = () =>\r\n    {\r\n       var text= document.getElementById(\"myText\");\r\n       text.select();\r\n       navigator.clipboard.writeText(text.value);\r\n       proos.showAlert(\"Copied to ClipBoard\",'success');\r\n    }\r\n    const clickLower = () =>\r\n    {\r\n        let newText= text.toLowerCase();\r\n        setText(newText);\r\n        proos.showAlert(\"Converted to LowerCase\",'success');\r\n    }\r\n    const changeText = (event) =>\r\n    {\r\n        setText(event.target.value);\r\n    }\r\n  return (\r\n    <div style={{backgroundColor: proos.mode === 'light'?'white':'#042743', color: proos.mode === 'light'?'black':'white'}}>\r\n        <div className=\"mb-3\">\r\n            <h1>{proos.title}</h1>\r\n        <label htmlFor=\"myText\" className=\"form-label\">Please Enter Text Below</label>\r\n        <textarea className=\"form-control\" id=\"myText\" value={text} style={{backgroundColor: proos.mode === 'light'?'white':'grey', color: proos.mode === 'light'?'black':'white'}} onChange={changeText} rows=\"8\"></textarea>\r\n        <button className=\"btn btn-primary mx-1 my-2\" onClick={clickUpper}>Convert To Uppercase</button>\r\n        <button className=\"btn btn-primary mx-1 my-2\" onClick={clickLower}>Convert To Lowercase</button>        \r\n        <button className=\"btn btn-primary mx-1 my-2\" onClick={clickClear}>Clear Text</button>\r\n        <button className=\"btn btn-primary mx-1 my-2\" onClick={clickCopy}>Copy Text</button>\r\n        </div>\r\n        <div className=\"container my-4\">\r\n            <h2>Text Summary</h2>\r\n            <p>{text===\"\"?0:text.split(\" \").length} words and {text.length} characters</p>\r\n        </div>\r\n        <div className=\"container my-4\">\r\n            <h2>Text Preview</h2>\r\n            <p>{text.length>0? text: 'Enter Something in textbox to preview it here'}</p>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nTextForm.prototype = {title: PropTypes.string.isRequired};\r\nTextForm.defaultProps= {title: 'Set Text Here'};\r\n\r\n","import './App.css';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\n// import { BrowserRouter as Router, Routes, Route} from 'react-router-dom';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message,type) => {\n    setAlert({\n    message: message,\n    type: type})\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  }\n  const toogleMode = ()=>\n  {\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert('Dark Has Been Enabled', 'success');\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light Has Been Enabled', 'success');\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title = \"TextUtils\" mode= {mode} tooglemode={toogleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-4\">\n    {/* <Routes> */}\n        {/* <Route exact path='/' element={<TextForm showAlert={showAlert} title= \"Please Enter Text to Analyze.\" mode={mode}/>}/> */}\n        <TextForm showAlert={showAlert} title= \"Please Enter Text to Analyze.\" mode={mode}/>\n        {/* <Route  path='/about' element={<About/>}/> */}\n      {/* </Routes> */}\n        </div>\n     {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}